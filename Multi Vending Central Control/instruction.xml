<?xml version="1.0" encoding="utf-8"?>
<InstructionData xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <DateTime>134025293894066148</DateTime>
  <GameVersion>0.2.5906.26015</GameVersion>
  <Title>Multi Vending Central Control</Title>
  <Description>Tallies all Vending Machines quantities, and acts like a brainâ€‹</Description>
  <Author>MrDrummer25</Author>
  <WorkshopFileHandle>0</WorkshopFileHandle>
  <Instructions># Vending slot index 2-101

alias QtyOnStack r13
alias LoopIndex r14
alias SlotIndex r15
alias VendingMachine d0
alias ItemDial d1
alias DispenseButton d2
alias DisplayQty d3

start:
j UpdateContents


MainLoop:
yield

l r0 ItemDial Setting # Get dial value
snez r1 r0
s VendingMachine Lock r1 # Lock if dial is not 0

bnez r0 ShowItem # If dial is 0, do nothing
s db Setting r0
s DisplayQty On 0 # Turn off display

j MainLoop

ShowItem:
s DisplayQty On 1 # Turn on display
sub r0 r0 1 # Convert to 0 based index
mul r0 r0 2 # Stack pointer index (2 values per item)
get r1 db r0
s db Setting r1 # Set chip's setting to the selected item's prefab hash
add r0 r0 1 # Move to quantity index
get r2 db r0
s DisplayQty Setting r2 # Set display quantity

l r0 DispenseButton Activate
bnezal r0 DispenseItem

# These auto increment infinitely until cleared
l r0 VendingMachine ImportCount
l r1 VendingMachine ExportCount
add r0 r0 r1
beqz r0 MainLoop

# Content changed, update stack
UpdateContents:
s DisplayQty Mode DisplayMode.String
s db Setting 0 # Clear chip hash display value
s DisplayQty Setting STR("Busy")
s VendingMachine ClearMemory 1 # clear Vending Machine internal memory

move SlotIndex 0
move sp 0
clr db # clear stack

## Fall through
SlotLoop:
ls r0 VendingMachine SlotIndex PrefabHash
ls r1 VendingMachine SlotIndex Quantity

move QtyOnStack -1
bnezal r0 GetQtyOnStack
beqzal QtyOnStack AddToStack
add SlotIndex SlotIndex 1
ble SlotIndex 101 SlotLoop

move r0 sp
div r0 r0 2

s ItemDial Mode r0 # Set max dial value
s ItemDial Setting 0 # Set max dial value
s DisplayQty Mode DisplayMode.Default # Set back to number display mode
s DisplayQty Setting 0 # Reset display to

j MainLoop

# r0 and r1 will be populated with the current slot's prefab hash and quantity
GetQtyOnStack:
move QtyOnStack 0
move LoopIndex 0

# Fall through to stack loop
StackLoop:
bge LoopIndex sp ra # Exit if at the end of the stack

get r2 db LoopIndex
add LoopIndex LoopIndex 1 # Increment from prefab to quantity index


bne r0 r2 NotTheSame


# The current slot item already exists on the stack
get QtyOnStack db LoopIndex

add QtyOnStack QtyOnStack r1 # Quantity
put db LoopIndex QtyOnStack


# Fall through to NotTheSame
NotTheSame:
add LoopIndex LoopIndex 1 # Increment to next prefab hash
j StackLoop

AddToStack:
push r0 # Prefab Hash
push r1 # Quantity
j ra

DispenseItem:
s VendingMachine RequestHash r1

j ra</Instructions>
</InstructionData>